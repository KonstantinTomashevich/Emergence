#pragma once

#include <CelerityAssetApi.hpp>

#include <Celerity/Asset/Asset.hpp>
#include <Celerity/Asset/AssetReferenceBinding.hpp>
#include <Celerity/Event/EventRegistrar.hpp>
#include <Celerity/Event/Macro.generated.hpp>
#include <Celerity/Standard/UniqueId.hpp>

namespace Emergence::Celerity
{
#define EventsApi CelerityAssetApi
EMERGENCE_CELERITY_EVENT1_DECLARATION (AssetRemovedNormalEvent, Memory::UniqueString, id);
#undef EventsApi

/// \brief Any autogenerated asset user addition event can be casted to this type.
struct CelerityAssetApi AssetUserAddedEventView
{
    Memory::UniqueString assetReferences[0u];
};

/// \brief Any autogenerated asset user change event can be casted to this type.
struct CelerityAssetApi AssetUserChangedEventView
{
    /// \brief We pack changes into sequence in order to optimize how it works with event engine.
    /// \details These sequence starts with all the old values and continues with the new values, like that:
    ///          `{oldAsset1, oldAsset2, oldAsset3, newAsset1, newAsset2, newAsset3}`.
    Memory::UniqueString assetReferenceSequence[0u];
};

/// \brief Any autogenerated asset user removal event can be casted to this type.
struct CelerityAssetApi AssetUserRemovedEventView
{
    Memory::UniqueString assetReferences[0u];
};

/// \brief Any autogenerated asset state update request event can be casted to this type.
struct CelerityAssetApi AssetStateUpdateEventView
{
    Memory::UniqueString assetId;
    AssetState state;
};

/// \brief Generates and registers events for all asset users and asset types.
CelerityAssetApi AssetReferenceBindingEventMap
RegisterAssetEvents (EventRegistrar &_registrar, const AssetReferenceBindingList &_bindings) noexcept;
} // namespace Emergence::Celerity

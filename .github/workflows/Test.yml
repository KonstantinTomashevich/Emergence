name: Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  run_tests:
    strategy:
      matrix:
        build_type: [ Release, Debug ]
        # Only Windows builds are enabled, because preinstalled CLang and GCC version on both ubuntu-latest and
        # macos-latest images do not fully support transparent unordered_multiset operations and concepts library.
        os: [ windows-latest ]
        toolchain: [ CLangCL, MSVC ]

    defaults:
      run:
        shell: pwsh

    env:
      BUILD_DIRECTORY: ${{github.workspace}}/Build

    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup dependencies
        uses: ./.github/actions/SetupDependencies
        with:
          platform: ${{runner.os}}
          build_type: ${{matrix.build_type}}

      - name: Create build directory
        run: cmake -E make_directory ${{env.BUILD_DIRECTORY}}

      # It would be easier to check coverage using independent LLVM installation instead of CLangCL,
      # but it somehow reports profile version mismatches that I can not reproduce on my local installation.
      - name: Enable coverage check
        if: matrix.os == 'windows-latest' && matrix.toolchain == 'CLangCL' && matrix.build_type == 'Debug'
        run: |
          echo "ENABLE_COVERAGE=yes" >> $Env:GITHUB_ENV
          echo "CMAKE_ENABLE_COVERAGE=-DEMERGENCE_ENABLE_COVERAGE=ON" >> $Env:GITHUB_ENV
          echo "LLVM_PROFILE_FILE=%m.profraw" >> $Env:GITHUB_ENV

      # Note: On windows-latest image there is the second LLVM installation that is already in Env:Path.
      #       If we want to use CLangCL, we must delete other installation from path to avoid mismatches.
      - name: Select CLangCL toolset
        if: matrix.os == 'windows-latest' && matrix.toolchain == 'CLangCL'
        run: |
          echo "CMAKE_GENERATOR=-G `"Visual Studio 16 2019`" -A x64 -T clangcl" >> $Env:GITHUB_ENV
          $PathWithoutLLVM13 = $Env:Path.Replace("C:\Program Files\LLVM\bin", "")
          echo "PATH=$PathWithoutLLVM13" >> $Env:GITHUB_ENV

      - name: Select MSVC toolset
        if: matrix.os == 'windows-latest' && matrix.toolchain == 'MSVC'
        run: echo "CMAKE_GENERATOR=-G `"Visual Studio 17 2022`" -A x64 -T v142" >> $Env:GITHUB_ENV

      - name: Configure
        working-directory: ${{env.BUILD_DIRECTORY}}
        run: cmake ${{github.workspace}} ${{env.CMAKE_GENERATOR}} ${{env.CMAKE_ENABLE_COVERAGE}}

      - name: Build
        working-directory: ${{env.BUILD_DIRECTORY}}
        run: cmake --build . --target EmergenceTests --config ${{matrix.build_type}} -j 2

      - name: Test
        working-directory: ${{env.BUILD_DIRECTORY}}
        run: ctest -C ${{matrix.build_type}}

      - name: Collect and check coverage data
        if: env.ENABLE_COVERAGE == 'yes'
        # We need to import Visual Studio environment to find LLVM tools, which is not possible through powershell.
        shell: cmd
        run: >
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsx86_amd64.bat" &&
          powershell .\Script\Coverage\CollectCLangCoverage.ps1 ${{env.BUILD_DIRECTORY}} ${{matrix.build_type}} &&
          powershell .\Script\Coverage\CheckCLangCoverage.ps1 ${{env.BUILD_DIRECTORY}}

      - name: Upload test and coverage results
        if: ${{ success() }} || ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Test and coverage results (${{matrix.build_type}}, ${{matrix.os}}, ${{matrix.toolchain}})
          path: |
            ${{env.BUILD_DIRECTORY}}/Coverage/Temporary
            ${{env.BUILD_DIRECTORY}}/Testing/Temporary
